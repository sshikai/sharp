using System;

namespace lab1
{

    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                var fraction1 = new Fraction(1, 2); 
                var fraction2 = new Fraction(1, 3); 

                Console.WriteLine($"Fraction 1: {fraction1}");
                Console.WriteLine($"Fraction 2: {fraction2}");

                Console.WriteLine($"Сложение: {fraction1} + {fraction2} = {fraction1 + fraction2}");
                Console.WriteLine($"Вычитание: {fraction1} - {fraction2} = {fraction1 - fraction2}");
                Console.WriteLine($"Умножение: {fraction1} * {fraction2} = {fraction1 * fraction2}");
                Console.WriteLine($"Деление: {fraction1} / {fraction2} = {fraction1 / fraction2}");

                Console.WriteLine($"Десятичное значение дроби 1: {fraction1.DecimalValue}");
                Console.WriteLine($"Десятичное значение дроби 2: {fraction2.DecimalValue}");
            }

            catch (NotCorrectlyDenominatorException ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Общая ошибка: {ex.Message}");
            }
        }
      
        public class NotCorrectlyDenominatorException : Exception
    {
        public NotCorrectlyDenominatorException(string message) : base(message) { }
    }

    
    public class Fraction
    {
        private int numerator;   
        private int denominator; 

       
        public Fraction(int numerator, int denominator)
        {
            if (denominator == 0)
                throw new NotCorrectlyDenominatorException("Знаменатель не может быть равен 0");

            this.numerator = numerator;
            this.denominator = denominator;
            Simplify(); 
        }

        public int Numerator => numerator;
        public int Denominator => denominator;

        public double DecimalValue => (double)numerator / denominator;

        private void Simplify()
        {
            int nod = NOD(numerator, denominator);
            numerator /= nod;
            denominator /= nod;

            if (denominator < 0)
            {
                numerator = -numerator;
                denominator = -denominator;
            }
        }

        private int NOD(int a, int b)
        {
            return b == 0 ? Math.Abs(a) : NOD(b, a % b);
        }

        public static Fraction operator +(Fraction a, Fraction b) =>
            new Fraction(a.numerator * b.denominator + b.numerator * a.denominator, a.denominator * b.denominator);

        public static Fraction operator -(Fraction a, Fraction b) =>
            new Fraction(a.numerator * b.denominator - b.numerator * a.denominator, a.denominator * b.denominator);

        public static Fraction operator *(Fraction a, Fraction b) =>
            new Fraction(a.numerator * b.numerator, a.denominator * b.denominator);

        public static Fraction operator /(Fraction a, Fraction b)
        {
            if (b.numerator == 0)
                throw new NotCorrectlyDenominatorException("Деление на ноль");
            return new Fraction(a.numerator * b.denominator, a.denominator * b.numerator);
        }
     
        public override string ToString() => $"{numerator}/{denominator}";
    }

  
    }
}
